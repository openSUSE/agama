// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{translate::*};

glib::wrapper! {
    #[doc(alias = "ZyppExpected")]
    pub struct Expected(Object<ffi::ZyppExpected, ffi::ZyppExpectedClass>);

    match fn {
        type_ => || ffi::zypp_expected_get_type(),
    }
}

impl Expected {
    #[doc(alias = "zypp_expected_new_error")]
    pub fn new_error(error: &mut glib::Error) -> Expected {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::zypp_expected_new_error(error.to_glib_none_mut().0))
        }
    }

    #[doc(alias = "zypp_expected_new_value")]
    pub fn new_value(value: &glib::Value) -> Expected {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::zypp_expected_new_value(value.to_glib_none().0))
        }
    }

    #[doc(alias = "zypp_expected_get_error")]
    #[doc(alias = "get_error")]
    pub fn error(&self) -> Option<glib::Error> {
        unsafe {
            from_glib_none(ffi::zypp_expected_get_error(self.to_glib_none().0))
        }
    }

    #[doc(alias = "zypp_expected_get_value")]
    #[doc(alias = "get_value")]
    pub fn value(&self) -> Result<Option<glib::Value>, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::zypp_expected_get_value(self.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_none(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "zypp_expected_has_error")]
    pub fn has_error(&self) -> bool {
        unsafe {
            from_glib(ffi::zypp_expected_has_error(self.to_glib_none().0))
        }
    }

    #[doc(alias = "zypp_expected_has_value")]
    pub fn has_value(&self) -> bool {
        unsafe {
            from_glib(ffi::zypp_expected_has_value(self.to_glib_none().0))
        }
    }
}
