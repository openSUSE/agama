// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{translate::*};

glib::wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct ManagedFile(Boxed<ffi::ZyppManagedFile>);

    match fn {
        copy => |ptr| ffi::zypp_managed_file_copy(mut_override(ptr)),
        free => |ptr| ffi::zypp_managed_file_free(ptr),
        type_ => || ffi::zypp_managed_file_get_type(),
    }
}

impl ManagedFile {
    #[doc(alias = "zypp_managed_file_new")]
    pub fn new(path: &str, dispose: bool) -> ManagedFile {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::zypp_managed_file_new(path.to_glib_none().0, dispose.into_glib()))
        }
    }

    #[doc(alias = "zypp_managed_file_get_path")]
    #[doc(alias = "get_path")]
    pub fn path(&mut self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::zypp_managed_file_get_path(self.to_glib_none_mut().0))
        }
    }

    #[doc(alias = "zypp_managed_file_set_dispose_enabled")]
    pub fn set_dispose_enabled(&mut self, enabled: bool) {
        unsafe {
            ffi::zypp_managed_file_set_dispose_enabled(self.to_glib_none_mut().0, enabled.into_glib());
        }
    }
}
