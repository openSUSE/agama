// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "ZyppProgressObserver")]
    pub struct ProgressObserver(Object<ffi::ZyppProgressObserver, ffi::ZyppProgressObserverClass>);

    match fn {
        type_ => || ffi::zypp_progress_observer_get_type(),
    }
}

impl ProgressObserver {
            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`ProgressObserver`] objects.
            ///
            /// This method returns an instance of [`ProgressObserverBuilder`](crate::builders::ProgressObserverBuilder) which can be used to create [`ProgressObserver`] objects.
            pub fn builder() -> ProgressObserverBuilder {
                ProgressObserverBuilder::new()
            }
        

    #[doc(alias = "zypp_progress_observer_add_subtask")]
    pub fn add_subtask(&self, newChild: &ProgressObserver, weight: f32) {
        unsafe {
            ffi::zypp_progress_observer_add_subtask(self.to_glib_none().0, newChild.to_glib_none().0, weight);
        }
    }

    #[doc(alias = "zypp_progress_observer_get_base_steps")]
    #[doc(alias = "get_base_steps")]
    #[doc(alias = "base-steps")]
    pub fn base_steps(&self) -> i32 {
        unsafe {
            ffi::zypp_progress_observer_get_base_steps(self.to_glib_none().0)
        }
    }

    #[doc(alias = "zypp_progress_observer_get_children")]
    #[doc(alias = "get_children")]
    pub fn children(&self) -> Vec<ProgressObserver> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::zypp_progress_observer_get_children(self.to_glib_none().0))
        }
    }

    #[doc(alias = "zypp_progress_observer_get_current")]
    #[doc(alias = "get_current")]
    pub fn current(&self) -> f64 {
        unsafe {
            ffi::zypp_progress_observer_get_current(self.to_glib_none().0)
        }
    }

    #[doc(alias = "zypp_progress_observer_get_label")]
    #[doc(alias = "get_label")]
    pub fn label(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::zypp_progress_observer_get_label(self.to_glib_none().0))
        }
    }

    #[doc(alias = "zypp_progress_observer_get_progress")]
    #[doc(alias = "get_progress")]
    pub fn progress(&self) -> f64 {
        unsafe {
            ffi::zypp_progress_observer_get_progress(self.to_glib_none().0)
        }
    }

    #[doc(alias = "zypp_progress_observer_get_steps")]
    #[doc(alias = "get_steps")]
    pub fn steps(&self) -> f64 {
        unsafe {
            ffi::zypp_progress_observer_get_steps(self.to_glib_none().0)
        }
    }

    #[doc(alias = "zypp_progress_observer_inc")]
    pub fn inc(&self, increase: i32) {
        unsafe {
            ffi::zypp_progress_observer_inc(self.to_glib_none().0, increase);
        }
    }

    #[doc(alias = "zypp_progress_observer_set_base_steps")]
    #[doc(alias = "base-steps")]
    pub fn set_base_steps(&self, stepCount: i32) {
        unsafe {
            ffi::zypp_progress_observer_set_base_steps(self.to_glib_none().0, stepCount);
        }
    }

    #[doc(alias = "zypp_progress_observer_set_current")]
    pub fn set_current(&self, value: f64) {
        unsafe {
            ffi::zypp_progress_observer_set_current(self.to_glib_none().0, value);
        }
    }

    #[doc(alias = "zypp_progress_observer_set_finished")]
    pub fn set_finished(&self) {
        unsafe {
            ffi::zypp_progress_observer_set_finished(self.to_glib_none().0);
        }
    }

    #[doc(alias = "zypp_progress_observer_set_label")]
    #[doc(alias = "label")]
    pub fn set_label(&self, label: &str) {
        unsafe {
            ffi::zypp_progress_observer_set_label(self.to_glib_none().0, label.to_glib_none().0);
        }
    }

    pub fn value(&self) -> f64 {
        ObjectExt::property(self, "value")
    }

    pub fn set_value(&self, value: f64) {
        ObjectExt::set_property(self,"value", value)
    }

    #[doc(alias = "finished")]
    pub fn connect_finished<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn finished_trampoline<F: Fn(&ProgressObserver) + 'static>(this: *mut ffi::ZyppProgressObserver, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"finished\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(finished_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "new-subtask")]
    pub fn connect_new_subtask<F: Fn(&Self, &ProgressObserver) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn new_subtask_trampoline<F: Fn(&ProgressObserver, &ProgressObserver) + 'static>(this: *mut ffi::ZyppProgressObserver, object: *mut ffi::ZyppProgressObserver, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(object))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"new-subtask\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(new_subtask_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "base-steps")]
    pub fn connect_base_steps_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_base_steps_trampoline<F: Fn(&ProgressObserver) + 'static>(this: *mut ffi::ZyppProgressObserver, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::base-steps\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_base_steps_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "label")]
    pub fn connect_label_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_label_trampoline<F: Fn(&ProgressObserver) + 'static>(this: *mut ffi::ZyppProgressObserver, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::label\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_label_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "progress")]
    pub fn connect_progress_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_progress_trampoline<F: Fn(&ProgressObserver) + 'static>(this: *mut ffi::ZyppProgressObserver, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::progress\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_progress_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "steps")]
    pub fn connect_steps_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_steps_trampoline<F: Fn(&ProgressObserver) + 'static>(this: *mut ffi::ZyppProgressObserver, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::steps\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_steps_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "value")]
    pub fn connect_value_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_value_trampoline<F: Fn(&ProgressObserver) + 'static>(this: *mut ffi::ZyppProgressObserver, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::value\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_value_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`ProgressObserver`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct ProgressObserverBuilder {
            builder: glib::object::ObjectBuilder<'static, ProgressObserver>,
        }

        impl ProgressObserverBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn base_steps(self, base_steps: i32) -> Self {
                            Self { builder: self.builder.property("base-steps", base_steps), }
                        }

                            pub fn label(self, label: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("label", label.into()), }
                        }

                            pub fn value(self, value: f64) -> Self {
                            Self { builder: self.builder.property("value", value), }
                        }

                            //pub fn zypp_cppObj(self, zypp_cppObj: /*Unimplemented*/Basic: Pointer) -> Self {
                        //    Self { builder: self.builder.property("zypp-cppObj", zypp_cppObj), }
                        //}

    // rustdoc-stripper-ignore-next
    /// Build the [`ProgressObserver`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> ProgressObserver {
    self.builder.build() }
}
