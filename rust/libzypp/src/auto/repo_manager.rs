// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::{ffi,Context,Expected,ProgressObserver,RepoInfo,RepoManagerOptions,ServiceInfo};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "ZyppRepoManager")]
    pub struct RepoManager(Object<ffi::ZyppRepoManager, ffi::ZyppRepoManagerClass>);

    match fn {
        type_ => || ffi::zypp_repo_manager_get_type(),
    }
}

impl RepoManager {
    #[doc(alias = "zypp_repo_manager_new")]
    pub fn new(ctx: &Context) -> RepoManager {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(ffi::zypp_repo_manager_new(ctx.to_glib_none().0))
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`RepoManager`] objects.
            ///
            /// This method returns an instance of [`RepoManagerBuilder`](crate::builders::RepoManagerBuilder) which can be used to create [`RepoManager`] objects.
            pub fn builder() -> RepoManagerBuilder {
                RepoManagerBuilder::new()
            }
        

    #[doc(alias = "zypp_repo_manager_get_known_repos")]
    #[doc(alias = "get_known_repos")]
    pub fn known_repos(&self) -> Vec<RepoInfo> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::zypp_repo_manager_get_known_repos(self.to_glib_none().0))
        }
    }

    #[doc(alias = "zypp_repo_manager_get_known_services")]
    #[doc(alias = "get_known_services")]
    pub fn known_services(&self) -> Vec<ServiceInfo> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::zypp_repo_manager_get_known_services(self.to_glib_none().0))
        }
    }

    #[doc(alias = "zypp_repo_manager_initialize")]
    pub fn initialize(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::zypp_repo_manager_initialize(self.to_glib_none().0, &mut error);
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "zypp_repo_manager_refresh_repos")]
    pub fn refresh_repos(&self, repos: &[RepoInfo], forceDownload: bool, statusTracker: Option<ProgressObserver>) -> Vec<Expected> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::zypp_repo_manager_refresh_repos(self.to_glib_none().0, repos.to_glib_none().0, forceDownload.into_glib(), statusTracker.into_glib_ptr()))
        }
    }

    pub fn options(&self) -> Option<RepoManagerOptions> {
        ObjectExt::property(self, "options")
    }

    pub fn set_options(&self, options: Option<&RepoManagerOptions>) {
        ObjectExt::set_property(self,"options", options)
    }

    #[doc(alias = "options")]
    pub fn connect_options_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_options_trampoline<F: Fn(&RepoManager) + 'static>(this: *mut ffi::ZyppRepoManager, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::options\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(notify_options_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl Default for RepoManager {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`RepoManager`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct RepoManagerBuilder {
            builder: glib::object::ObjectBuilder<'static, RepoManager>,
        }

        impl RepoManagerBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn options(self, options: &RepoManagerOptions) -> Self {
                            Self { builder: self.builder.property("options", options), }
                        }

                            //pub fn zypp_cppObj(self, zypp_cppObj: /*Unimplemented*/Basic: Pointer) -> Self {
                        //    Self { builder: self.builder.property("zypp-cppObj", zypp_cppObj), }
                        //}

                            pub fn zyppcontext(self, zyppcontext: &Context) -> Self {
                            Self { builder: self.builder.property("zyppcontext", zyppcontext.clone()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`RepoManager`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> RepoManager {
    self.builder.build() }
}
