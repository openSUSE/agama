// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

use crate::{ffi};
use glib::{prelude::*,translate::*};

glib::wrapper! {
    #[doc(alias = "ZyppInfoBase")]
    pub struct InfoBase(Interface<ffi::ZyppInfoBase, ffi::ZyppInfoBaseInterface>);

    match fn {
        type_ => || ffi::zypp_info_base_get_type(),
    }
}

impl InfoBase {
        pub const NONE: Option<&'static InfoBase> = None;
    
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::InfoBase>> Sealed for T {}
}

pub trait InfoBaseExt: IsA<InfoBase> + sealed::Sealed + 'static {
    #[doc(alias = "zypp_info_base_alias")]
    fn alias(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::zypp_info_base_alias(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "zypp_info_base_as_user_string")]
    fn as_user_string(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::zypp_info_base_as_user_string(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "zypp_info_base_autorefresh")]
    fn autorefresh(&self) -> bool {
        unsafe {
            from_glib(ffi::zypp_info_base_autorefresh(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "zypp_info_base_enabled")]
    fn enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::zypp_info_base_enabled(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "zypp_info_base_escaped_alias")]
    fn escaped_alias(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::zypp_info_base_escaped_alias(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "zypp_info_base_filepath")]
    fn filepath(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::zypp_info_base_filepath(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "zypp_info_base_label")]
    fn label(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::zypp_info_base_label(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "zypp_info_base_name")]
    fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::zypp_info_base_name(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "zypp_info_base_raw_name")]
    fn raw_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::zypp_info_base_raw_name(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "zypp_info_base_set_alias")]
    fn set_alias(&self, alias: &str) {
        unsafe {
            ffi::zypp_info_base_set_alias(self.as_ref().to_glib_none().0, alias.to_glib_none().0);
        }
    }

    #[doc(alias = "zypp_info_base_set_autorefresh")]
    fn set_autorefresh(&self, enabled: bool) {
        unsafe {
            ffi::zypp_info_base_set_autorefresh(self.as_ref().to_glib_none().0, enabled.into_glib());
        }
    }

    #[doc(alias = "zypp_info_base_set_enabled")]
    fn set_enabled(&self, enabled: bool) {
        unsafe {
            ffi::zypp_info_base_set_enabled(self.as_ref().to_glib_none().0, enabled.into_glib());
        }
    }

    #[doc(alias = "zypp_info_base_set_filepath")]
    fn set_filepath(&self, filepath: &str) {
        unsafe {
            ffi::zypp_info_base_set_filepath(self.as_ref().to_glib_none().0, filepath.to_glib_none().0);
        }
    }

    #[doc(alias = "zypp_info_base_set_name")]
    fn set_name(&self, name: &str) {
        unsafe {
            ffi::zypp_info_base_set_name(self.as_ref().to_glib_none().0, name.to_glib_none().0);
        }
    }
}

impl<O: IsA<InfoBase>> InfoBaseExt for O {}
