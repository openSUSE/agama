// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(clippy::approx_constant, clippy::type_complexity, clippy::unreadable_literal, clippy::upper_case_acronyms)]
#![cfg_attr(docsrs, feature(doc_cfg))]

use glib_sys as glib;
use gobject_sys as gobject;

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, time_t, off_t, intptr_t, uintptr_t, FILE};
#[cfg(unix)]
#[allow(unused_imports)]
use libc::{dev_t, gid_t, pid_t, socklen_t, uid_t};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Enums
pub type ZyppException = c_int;
pub const ZYPP_ERROR: ZyppException = 0;

pub type ZyppRepoInfoType = c_int;
pub const ZYPP_REPO_NONE: ZyppRepoInfoType = 0;
pub const ZYPP_REPO_RPMMD: ZyppRepoInfoType = 1;
pub const ZYPP_REPO_YAST2: ZyppRepoInfoType = 2;
pub const ZYPP_REPO_RPMPLAINDIR: ZyppRepoInfoType = 3;

pub type ZyppRepoManagerError = c_int;
pub const ZYPP_REPO_MANAGER_ERROR_REF_FAILED: ZyppRepoManagerError = 0;
pub const ZYPP_REPO_MANAGER_ERROR_REF_SKIPPED: ZyppRepoManagerError = 1;
pub const ZYPP_REPO_MANAGER_ERROR_REF_ABORTED: ZyppRepoManagerError = 2;

pub type ZyppRepoRefreshResult = c_int;
pub const ZYPP_REPO_MANAGER_UP_TO_DATE: ZyppRepoRefreshResult = 0;
pub const ZYPP_REPO_MANAGER_REFRESHED: ZyppRepoRefreshResult = 1;

// Records
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ZyppContextClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for ZyppContextClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ZyppContextClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct ZyppExpectedClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for ZyppExpectedClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ZyppExpectedClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct ZyppInfoBaseInterface {
    pub parent_iface: gobject::GTypeInterface,
    pub alias: Option<unsafe extern "C" fn(*mut ZyppInfoBase) -> *mut c_char>,
    pub escaped_alias: Option<unsafe extern "C" fn(*mut ZyppInfoBase) -> *mut c_char>,
    pub name: Option<unsafe extern "C" fn(*mut ZyppInfoBase) -> *mut c_char>,
    pub raw_name: Option<unsafe extern "C" fn(*mut ZyppInfoBase) -> *mut c_char>,
    pub label: Option<unsafe extern "C" fn(*mut ZyppInfoBase) -> *mut c_char>,
    pub as_user_string: Option<unsafe extern "C" fn(*mut ZyppInfoBase) -> *mut c_char>,
    pub enabled: Option<unsafe extern "C" fn(*mut ZyppInfoBase) -> gboolean>,
    pub autorefresh: Option<unsafe extern "C" fn(*mut ZyppInfoBase) -> gboolean>,
    pub filepath: Option<unsafe extern "C" fn(*mut ZyppInfoBase) -> *mut c_char>,
    pub set_alias: Option<unsafe extern "C" fn(*mut ZyppInfoBase, *const c_char)>,
    pub set_name: Option<unsafe extern "C" fn(*mut ZyppInfoBase, *const c_char)>,
    pub set_enabled: Option<unsafe extern "C" fn(*mut ZyppInfoBase, gboolean)>,
    pub set_autorefresh: Option<unsafe extern "C" fn(*mut ZyppInfoBase, gboolean)>,
    pub set_filepath: Option<unsafe extern "C" fn(*mut ZyppInfoBase, *const c_char)>,
}

impl ::std::fmt::Debug for ZyppInfoBaseInterface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ZyppInfoBaseInterface @ {self:p}"))
         .field("parent_iface", &self.parent_iface)
         .field("alias", &self.alias)
         .field("escaped_alias", &self.escaped_alias)
         .field("name", &self.name)
         .field("raw_name", &self.raw_name)
         .field("label", &self.label)
         .field("as_user_string", &self.as_user_string)
         .field("enabled", &self.enabled)
         .field("autorefresh", &self.autorefresh)
         .field("filepath", &self.filepath)
         .field("set_alias", &self.set_alias)
         .field("set_name", &self.set_name)
         .field("set_enabled", &self.set_enabled)
         .field("set_autorefresh", &self.set_autorefresh)
         .field("set_filepath", &self.set_filepath)
         .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct ZyppManagedFile {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for ZyppManagedFile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ZyppManagedFile @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct ZyppProgressObserverClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for ZyppProgressObserverClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ZyppProgressObserverClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct ZyppRepoInfoClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for ZyppRepoInfoClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ZyppRepoInfoClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct ZyppRepoManagerClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for ZyppRepoManagerClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ZyppRepoManagerClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct ZyppRepoManagerOptions {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for ZyppRepoManagerOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ZyppRepoManagerOptions @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct ZyppRepositoryClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for ZyppRepositoryClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ZyppRepositoryClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct ZyppServiceInfoClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for ZyppServiceInfoClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ZyppServiceInfoClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

// Classes
#[repr(C)]
#[allow(dead_code)]
pub struct ZyppContext {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for ZyppContext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ZyppContext @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct ZyppExpected {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for ZyppExpected {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ZyppExpected @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct ZyppProgressObserver {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for ZyppProgressObserver {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ZyppProgressObserver @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct ZyppRepoInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for ZyppRepoInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ZyppRepoInfo @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct ZyppRepoManager {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for ZyppRepoManager {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ZyppRepoManager @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct ZyppRepository {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for ZyppRepository {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ZyppRepository @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
#[allow(dead_code)]
pub struct ZyppServiceInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for ZyppServiceInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("ZyppServiceInfo @ {self:p}"))
         .finish()
    }
}

// Interfaces
#[repr(C)]
#[allow(dead_code)]
pub struct ZyppInfoBase {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for ZyppInfoBase {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "ZyppInfoBase @ {self:p}")
    }
}


#[link(name = "zypp-glib")]
extern "C" {

    //=========================================================================
    // ZyppException
    //=========================================================================
    pub fn zypp_exception_get_type() -> GType;
    pub fn zypp_exception_quark() -> glib::GQuark;

    //=========================================================================
    // ZyppRepoInfoType
    //=========================================================================
    pub fn zypp_repo_info_type_get_type() -> GType;

    //=========================================================================
    // ZyppRepoManagerError
    //=========================================================================
    pub fn zypp_repo_manager_error_get_type() -> GType;
    pub fn zypp_repo_manager_error_quark() -> glib::GQuark;

    //=========================================================================
    // ZyppRepoRefreshResult
    //=========================================================================
    pub fn zypp_repo_refresh_result_get_type() -> GType;

    //=========================================================================
    // ZyppManagedFile
    //=========================================================================
    pub fn zypp_managed_file_get_type() -> GType;
    pub fn zypp_managed_file_new(path: *const c_char, dispose: gboolean) -> *mut ZyppManagedFile;
    pub fn zypp_managed_file_copy(r: *mut ZyppManagedFile) -> *mut ZyppManagedFile;
    pub fn zypp_managed_file_free(r: *mut ZyppManagedFile);
    pub fn zypp_managed_file_get_path(self_: *mut ZyppManagedFile) -> *mut c_char;
    pub fn zypp_managed_file_set_dispose_enabled(self_: *mut ZyppManagedFile, enabled: gboolean);

    //=========================================================================
    // ZyppRepoManagerOptions
    //=========================================================================
    pub fn zypp_repo_manager_options_get_type() -> GType;
    pub fn zypp_repo_manager_options_new(root: *const c_char) -> *mut ZyppRepoManagerOptions;
    pub fn zypp_repo_manager_options_copy(self_: *mut ZyppRepoManagerOptions) -> *mut ZyppRepoManagerOptions;
    pub fn zypp_repo_manager_options_free(self_: *mut ZyppRepoManagerOptions);
    pub fn zypp_repo_manager_options_get_root(self_: *mut ZyppRepoManagerOptions) -> *mut c_char;

    //=========================================================================
    // ZyppContext
    //=========================================================================
    pub fn zypp_context_get_type() -> GType;
    pub fn zypp_context_load_system(self_: *mut ZyppContext, sysRoot: *const c_char, error: *mut *mut glib::GError) -> gboolean;
    pub fn zypp_context_sysroot(self_: *mut ZyppContext) -> *mut c_char;
    pub fn zypp_context_version(self_: *mut ZyppContext) -> *const c_char;

    //=========================================================================
    // ZyppExpected
    //=========================================================================
    pub fn zypp_expected_get_type() -> GType;
    pub fn zypp_expected_new_error(error: *mut glib::GError) -> *mut ZyppExpected;
    pub fn zypp_expected_new_value(value: *const gobject::GValue) -> *mut ZyppExpected;
    pub fn zypp_expected_get_error(self_: *mut ZyppExpected) -> *const glib::GError;
    pub fn zypp_expected_get_value(self_: *mut ZyppExpected, error: *mut *mut glib::GError) -> *const gobject::GValue;
    pub fn zypp_expected_has_error(self_: *mut ZyppExpected) -> gboolean;
    pub fn zypp_expected_has_value(self_: *mut ZyppExpected) -> gboolean;

    //=========================================================================
    // ZyppProgressObserver
    //=========================================================================
    pub fn zypp_progress_observer_get_type() -> GType;
    pub fn zypp_progress_observer_add_subtask(self_: *mut ZyppProgressObserver, newChild: *mut ZyppProgressObserver, weight: c_float);
    pub fn zypp_progress_observer_get_base_steps(self_: *mut ZyppProgressObserver) -> c_int;
    pub fn zypp_progress_observer_get_children(self_: *mut ZyppProgressObserver) -> *const glib::GList;
    pub fn zypp_progress_observer_get_current(self_: *mut ZyppProgressObserver) -> c_double;
    pub fn zypp_progress_observer_get_label(self_: *mut ZyppProgressObserver) -> *const c_char;
    pub fn zypp_progress_observer_get_progress(self_: *mut ZyppProgressObserver) -> c_double;
    pub fn zypp_progress_observer_get_steps(self_: *mut ZyppProgressObserver) -> c_double;
    pub fn zypp_progress_observer_inc(self_: *mut ZyppProgressObserver, increase: c_int);
    pub fn zypp_progress_observer_set_base_steps(self_: *mut ZyppProgressObserver, stepCount: c_int);
    pub fn zypp_progress_observer_set_current(self_: *mut ZyppProgressObserver, value: c_double);
    pub fn zypp_progress_observer_set_finished(self_: *mut ZyppProgressObserver);
    pub fn zypp_progress_observer_set_label(self_: *mut ZyppProgressObserver, label: *const c_char);

    //=========================================================================
    // ZyppRepoInfo
    //=========================================================================
    pub fn zypp_repo_info_get_type() -> GType;
    pub fn zypp_repo_info_new(context: *mut ZyppContext) -> *mut ZyppRepoInfo;
    pub fn zypp_repo_info_get_repo_type(self_: *mut ZyppRepoInfo) -> ZyppRepoInfoType;

    //=========================================================================
    // ZyppRepoManager
    //=========================================================================
    pub fn zypp_repo_manager_get_type() -> GType;
    pub fn zypp_repo_manager_new(ctx: *mut ZyppContext) -> *mut ZyppRepoManager;
    pub fn zypp_repo_manager_get_known_repos(self_: *mut ZyppRepoManager) -> *mut glib::GList;
    pub fn zypp_repo_manager_get_known_services(self_: *mut ZyppRepoManager) -> *mut glib::GList;
    pub fn zypp_repo_manager_initialize(self_: *mut ZyppRepoManager, error: *mut *mut glib::GError) -> gboolean;
    pub fn zypp_repo_manager_refresh_repos(self_: *mut ZyppRepoManager, repos: *mut glib::GList, forceDownload: gboolean, statusTracker: *mut ZyppProgressObserver) -> *mut glib::GList;

    //=========================================================================
    // ZyppRepository
    //=========================================================================
    pub fn zypp_repository_get_type() -> GType;
    pub fn zypp_repository_get_name(self_: *mut ZyppRepository) -> *mut c_char;
    pub fn zypp_repository_get_repoinfo(self_: *mut ZyppRepository) -> *mut ZyppRepoInfo;

    //=========================================================================
    // ZyppServiceInfo
    //=========================================================================
    pub fn zypp_service_info_get_type() -> GType;
    pub fn zypp_service_info_new(context: *mut ZyppContext) -> *mut ZyppServiceInfo;

    //=========================================================================
    // ZyppInfoBase
    //=========================================================================
    pub fn zypp_info_base_get_type() -> GType;
    pub fn zypp_info_base_alias(self_: *mut ZyppInfoBase) -> *mut c_char;
    pub fn zypp_info_base_as_user_string(self_: *mut ZyppInfoBase) -> *mut c_char;
    pub fn zypp_info_base_autorefresh(self_: *mut ZyppInfoBase) -> gboolean;
    pub fn zypp_info_base_enabled(self_: *mut ZyppInfoBase) -> gboolean;
    pub fn zypp_info_base_escaped_alias(self_: *mut ZyppInfoBase) -> *mut c_char;
    pub fn zypp_info_base_filepath(self_: *mut ZyppInfoBase) -> *mut c_char;
    pub fn zypp_info_base_label(self_: *mut ZyppInfoBase) -> *mut c_char;
    pub fn zypp_info_base_name(self_: *mut ZyppInfoBase) -> *mut c_char;
    pub fn zypp_info_base_raw_name(self_: *mut ZyppInfoBase) -> *mut c_char;
    pub fn zypp_info_base_set_alias(self_: *mut ZyppInfoBase, alias: *const c_char);
    pub fn zypp_info_base_set_autorefresh(self_: *mut ZyppInfoBase, enabled: gboolean);
    pub fn zypp_info_base_set_enabled(self_: *mut ZyppInfoBase, enabled: gboolean);
    pub fn zypp_info_base_set_filepath(self_: *mut ZyppInfoBase, filepath: *const c_char);
    pub fn zypp_info_base_set_name(self_: *mut ZyppInfoBase, name: *const c_char);

}
